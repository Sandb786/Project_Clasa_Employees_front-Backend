1. MultipartFile objects

 Explaination:- Since MultipartFile objects often store uploaded files as temporary files, 
               they may be removed automatically once the request is complete, making tempFile invalid in the next request.

 Solution:- Convert 'MultipartFile' to 'InputStream'

            {
             inputStream = file.getInputStream();

             filePath=Paths.get(path,file.getOriginalFilename());

             Files.copy(inputStream,filePath,StandardCopyOption.REPLACE_EXISTING)
            }

 Files.copy() :- Method to copy the InputStream directly to the file destination and replaces the file if it already exists. 
               This method is concise and leverages Java NIO for efficient file operation

 StandardCopyOption.REPLACE_EXISTING :-  Is an enum constant from the StandardCopyOption enum, which is part of the Java NIO (New Input/Output) library (java.nio.file package). 
                                       Enums in Java are special types used to define collections of constants,and StandardCopyOption is an enum that specifies various options 
                                       for file copy and move operation.

 InputStream :- Learn About It....        



2.Add Validation errors to a specific field 

    Explaination:- "result.rejectValue()" is a method in Spring’s 'BindingResult interface' that allows you to programmatically add 
                    validation errors to a specific field.This can be particularly useful when you need to apply custom business 
                    logic beyond the basic annotations like( @Size, @NotBlank ) etc.

    Solution:-     Syntex: "result.rejectValue(fieldName, errorCode, errorMessage);"

                    fieldName: The name of the field where the error is occurring.

                    errorCode: A code that identifies the error. This can be used for internationalization (i18n)
                               purposes, but it can also just be a unique identifier for the error if you’re not 
                               using messages.properties for translations.

                    errorMessage: The error message you want to display to the user. This will be shown in the view
                                  if you set it up to display field errors.

                    Example:- result.rejectValue("fieldName", "error.fieldName", "*Your Massage........");

3.URL Building with Parameters

    Explaination:- Building URLs with parameters in Thymeleaf using th:href is a powerful way to create dynamic links in 
                    Spring Boot applications, especially when you need to pass specific data like user IDs, product codes, or any path
                    variable directly into the URL.

    Basic Syntax:- In Thymeleaf, you can use @{...} to build URLs dynamically. 

                   *Path Variables:- These are parameters that are part of the URL path, like "/user/123".
                                     To include path variables in a URL with Thymeleaf, you define the 
                                     variable in curly braces {} and pass the value using (...).

                            Example: Suppose we have a URL /user/{id}, where {id} is a placeholder for a user ID. 
                                     Here's how to build this dynamically in Thymeleaf:

                                    "<a th:href="@{ /user/ {id}   (id=${user.id}) }">User Profile</a>"

                                   ' id' is the name of the 'path variable' you want to replace.

                   *Query Parameters:- These are parameters that come after a ? in the URL, like "/search?query=spring".

                            Example: <a th:href="@{/search(query=${searchQuery})}">Search</a>

4.